// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType  = "library"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String   @id @default(uuid())
  username      String   
  name          String?
  email         String   @unique
  password      String
  profilePic    String?  @default("https://res.cloudinary.com/dyhb5midi/image/upload/fl_preserve_transparency/v1718448478/a-cheerful-and-minimalist-illustration-of-a-white--2NmfA0c1RjCF39nbfoCnYA-tpwlksSDRqiQUYqUSVTNLQ_s4ieid.jpg?_s=public-apps")
  details       String?
  githubLink    String?
  linkedinLink  String?
  portfolio     String?
  savedPosts    Saved[]
  subscribers   Subscriber[] @relation("UserSubscribers")
  subscribedTo  Subscriber[] @relation("UserSubscribedTo")
  createdAt     DateTime @default(now())
  posts         Post[]
  projects      Project[]
  comments      Comment[]
  replies       Reply[]
  notifications Notification[]  
  verified      Boolean @default(false)
  messageRequests Message[]
  reports       Report[]
}

model Post {
  id            String    @id @default(uuid())
  author        User?      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String?
  link          String
  title         String
  description   String
  savedPosts    Saved[]
  bounty        Boolean
  issues        Issue[]
  techstack     String
}

model Project {
  id            String    @id @default(uuid())
  author        User?      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId      String?
  link          String
  title         String
  description   String
  comments      Comment[]
  savedPosts    Saved[] 
  bounty        Boolean
  bountyValue   String
  currency      String
  techstack     String
  completion    DateTime
}

model Comment {
  id        String    @id @default(uuid())
  content   String
  projectId    String
  post      Project     @relation(fields: [projectId], references: [id], onDelete:Cascade)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id], onDelete:Cascade)
  replies   Reply[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reply {
  id          String    @id @default(uuid())
  content     String
  commentId   String
  comment     Comment  @relation(fields: [commentId], references: [id], onDelete:Cascade)
  authorId    String
  author      User     @relation(fields: [authorId], references: [id] , onDelete:Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Issue {
  id        String    @id @default(uuid())
  title     String
  post      Post      @relation(fields: [postId], references: [id] , onDelete: Cascade)
  postId    String
  currency  String
  bounty    Int
}

model Subscriber {
  id            String   @id @default(uuid())
  userId        String
  subscriberId  String
  creationDate  DateTime @default(now())
  
  user          User     @relation("UserSubscribers", fields: [userId], references: [id], onDelete:Cascade)
  subscriber    User     @relation("UserSubscribedTo", fields: [subscriberId], references: [id], onDelete:Cascade)
}

model Saved {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  isPost Boolean @default(false)
  isProject Boolean @default(false)
  post   Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String?
}

model Notification {
  id          String      @id @default(uuid())
  userId      String
  type        String
  content     String
  link        String
  seen        Boolean  @default(false)
  createdAt   DateTime @default(now())
  subscriberId  String?
  subscriber  User?     @relation(fields: [subscriberId], references: [id], onDelete:Cascade)
}

model Message {
  id          String  @id @default(uuid())
  userId      String
  receiverId  String
  receiver    User  @relation(fields: [receiverId], references: [id], onDelete:Cascade)
  lastMessage String?
  status      String
  roomId      String?
  seen        Boolean @default(false)
  createdAt   DateTime  @default(now())
}

model Report {
  id          String @id @default(uuid())
  userId      String
  user      	User  @relation(fields: [userId], references: [id], onDelete:Cascade)
  status      String @default("pending")
  createdAt   DateTime @default(now())
  type        String?
  content     String?
  reportedId  String?
}